Index: backend/src/main/java/com/hackathon/dronedelivery/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.model;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport com.hackathon.dronedelivery.enums.Role;\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@Entity\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Table(name = \"users\")\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    private String username;\r\n\r\n    @JsonIgnore\r\n    private String password;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private Role role;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/model/User.java b/backend/src/main/java/com/hackathon/dronedelivery/model/User.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/model/User.java	(revision 5310f6bfea031db6ef4484738fb25e747eacc270)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/model/User.java	(date 1698393212193)
@@ -7,6 +7,11 @@
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import java.util.Collection;
+import java.util.List;
 
 @Data
 @Entity
@@ -14,18 +19,42 @@
 @AllArgsConstructor
 @NoArgsConstructor
 @Table(name = "users")
-public class User {
+public class User implements UserDetails {
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
-    private String name;
-
     private String username;
+    private String email;
 
     @JsonIgnore
     private String password;
 
-    @Enumerated(EnumType.STRING)
-    private Role role;
+    @OneToMany(mappedBy = "user",fetch = FetchType.EAGER, cascade = CascadeType.ALL)
+    private List<Authority> authorities;
+
+    @Override
+    public Collection<? extends GrantedAuthority> getAuthorities() {
+        return authorities;
+    }
+
+    @Override
+    public boolean isAccountNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isAccountNonLocked() {
+        return true;
+    }
+
+    @Override
+    public boolean isCredentialsNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
 }
Index: backend/src/main/java/com/hackathon/dronedelivery/config/WebSecurityConfig.java
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/config/WebSecurityConfig.java b/backend/src/main/java/com/hackathon/dronedelivery/config/WebSecurityConfig.java
deleted file mode 100644
--- a/backend/src/main/java/com/hackathon/dronedelivery/config/WebSecurityConfig.java	(revision 5310f6bfea031db6ef4484738fb25e747eacc270)
+++ /dev/null	(revision 5310f6bfea031db6ef4484738fb25e747eacc270)
@@ -1,4 +0,0 @@
-package com.hackathon.dronedelivery.config;
-
-public class WebSecurityConfig {
-}
Index: backend/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.url= jdbc:postgresql://localhost:5432/drone_delivery\r\nspring.datasource.username=postgres\r\nspring.datasource.password=postgres\r\n\r\nspring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect\r\n\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=create-drop\r\n\r\nspring.security.filter.order=10\r\n\r\nserver.port=8756
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/backend/src/main/resources/application.properties b/backend/src/main/resources/application.properties
--- a/backend/src/main/resources/application.properties	(revision 5310f6bfea031db6ef4484738fb25e747eacc270)
+++ b/backend/src/main/resources/application.properties	(date 1698392794259)
@@ -5,8 +5,10 @@
 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
 
 spring.jpa.show-sql=true
-spring.jpa.hibernate.ddl-auto=create-drop
+spring.jpa.hibernate.ddl-auto=update
 
 spring.security.filter.order=10
 
-server.port=8756
\ No newline at end of file
+server.port=8756
+
+jwt.secret=Op6WjlPzeSryUVRacnGO7Gt5Csl6pOyeHNiSI7ehNrxyW3Dly2kHsu1V1RtKeREvKYaqbN
Index: backend/src/main/java/com/hackathon/dronedelivery/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/config/SecurityConfig.java b/backend/src/main/java/com/hackathon/dronedelivery/config/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1698391694842)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/config/SecurityConfig.java	(date 1698391694842)
@@ -0,0 +1,39 @@
+package com.hackathon.dronedelivery.config;
+
+import com.hackathon.dronedelivery.util.filter.JwtFilter;
+import lombok.RequiredArgsConstructor;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.AuthenticationProvider;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.http.SessionCreationPolicy;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+
+@Configuration
+@EnableWebSecurity
+@RequiredArgsConstructor
+public class SecurityConfig {
+    private final JwtFilter jwtFilter;
+    private final AuthenticationProvider authenticationProvider;
+
+    @Bean
+    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
+        httpSecurity
+                .csrf().disable()
+                .cors().disable()
+                .authorizeHttpRequests()
+                .requestMatchers("/api/**")
+                .permitAll()
+                .anyRequest()
+                .authenticated()
+                .and()
+                .sessionManagement()
+                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
+                .and()
+                .authenticationProvider(authenticationProvider)
+                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);
+        return httpSecurity.build();
+    }
+}
Index: backend/src/main/java/com/hackathon/dronedelivery/auth/RegisterRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/auth/RegisterRequest.java b/backend/src/main/java/com/hackathon/dronedelivery/auth/RegisterRequest.java
new file mode 100644
--- /dev/null	(date 1698392409969)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/auth/RegisterRequest.java	(date 1698392409969)
@@ -0,0 +1,18 @@
+package com.hackathon.dronedelivery.auth;
+
+import com.hackathon.dronedelivery.enums.Role;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class RegisterRequest {
+    private String username;
+    private String email;
+    private String password;
+    private Role role;
+}
Index: backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationController.java b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationController.java
new file mode 100644
--- /dev/null	(date 1698392502355)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationController.java	(date 1698392502355)
@@ -0,0 +1,40 @@
+package com.hackathon.dronedelivery.auth;
+
+
+import com.hackathon.dronedelivery.model.User;
+import com.hackathon.dronedelivery.util.JwtUtil;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpHeaders;
+
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.annotation.AuthenticationPrincipal;
+
+import org.springframework.web.bind.annotation.*;
+
+
+@RestController
+@RequiredArgsConstructor
+@RequestMapping("/api")
+public class AuthenticationController {
+    private final AuthenticationService authenticationService;
+    private final JwtUtil jwtUtil;
+
+    @PostMapping("/register")
+    public ResponseEntity<?> register(@RequestBody RegisterRequest request) {
+        AuthenticationResponse response = authenticationService.register(request);
+        return ResponseEntity.ok().header(HttpHeaders.AUTHORIZATION, String.valueOf(response.getToken())).body(response.getUser());
+    }
+
+    @PostMapping("/authenticate")
+    public ResponseEntity<?> authenticate(
+            @RequestBody AuthenticationRequest request) {
+        AuthenticationResponse response = authenticationService.authenticate(request);
+        return ResponseEntity.ok().header(HttpHeaders.AUTHORIZATION, String.valueOf(response.getToken())).body(response.getUser());
+    }
+
+    @GetMapping("/validate")
+    public ResponseEntity<?> validationToken (@RequestParam("token") String token, @AuthenticationPrincipal User user) {
+        boolean isValidateToken = jwtUtil.isTokenValid(token, user);
+        return ResponseEntity.ok(isValidateToken);
+    }
+}
Index: backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationResponse.java b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationResponse.java
new file mode 100644
--- /dev/null	(date 1698392409947)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationResponse.java	(date 1698392409947)
@@ -0,0 +1,17 @@
+package com.hackathon.dronedelivery.auth;
+
+import com.hackathon.dronedelivery.model.User;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class AuthenticationResponse {
+    private String token;
+    private User user;
+
+}
Index: backend/src/main/java/com/hackathon/dronedelivery/config/ApplicationConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/config/ApplicationConfig.java b/backend/src/main/java/com/hackathon/dronedelivery/config/ApplicationConfig.java
new file mode 100644
--- /dev/null	(date 1698391337043)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/config/ApplicationConfig.java	(date 1698391337043)
@@ -0,0 +1,46 @@
+package com.hackathon.dronedelivery.config;
+
+import com.hackathon.dronedelivery.repository.UserRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.AuthenticationProvider;
+import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
+import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+
+
+@Configuration
+@RequiredArgsConstructor
+public class ApplicationConfig {
+
+    private final UserRepository repository;
+
+    @Bean
+    public UserDetailsService userDetailsService() {
+        return username -> (UserDetails) repository.findByUsername(username)
+                .orElseThrow(() -> new UsernameNotFoundException("Invalid credentials"));
+    }
+
+    @Bean
+    public AuthenticationProvider authenticationProvider() {
+        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
+        authenticationProvider.setUserDetailsService(userDetailsService());
+        authenticationProvider.setPasswordEncoder(passwordEncoder());
+        return authenticationProvider;
+    }
+
+    @Bean
+    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
+        return configuration.getAuthenticationManager();
+    }
+    @Bean
+    public PasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder();
+    }
+}
Index: backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationService.java b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationService.java
new file mode 100644
--- /dev/null	(date 1698393427303)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationService.java	(date 1698393427303)
@@ -0,0 +1,59 @@
+package com.hackathon.dronedelivery.auth;
+
+import com.hackathon.dronedelivery.model.Authority;
+import com.hackathon.dronedelivery.model.User;
+import com.hackathon.dronedelivery.service.UserService;
+import com.hackathon.dronedelivery.util.JwtUtil;
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.stereotype.Service;
+import org.springframework.validation.BindingResult;
+
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+@Service
+@RequiredArgsConstructor
+public class AuthenticationService {
+
+    private final UserService userService;
+    private final PasswordEncoder passwordEncoder;
+    private final JwtUtil jwtUtil;
+    private final AuthenticationManager authenticationManager;
+
+    public AuthenticationResponse register(RegisterRequest request) {
+        Authority authority = new Authority(request.getRole());
+        var user = User.builder()
+                .username(request.getUsername())
+                .email(request.getEmail())
+                .password(passwordEncoder.encode(request.getPassword()))
+                .authorities(List.of(authority))
+                .build();
+
+        authority.setUser(user);
+        userService.save(user);
+
+        var jwtToken = jwtUtil.generateToken(user);
+        return AuthenticationResponse.builder()
+                .token(jwtToken)
+                .user(user)
+                .build();
+    }
+
+    public AuthenticationResponse authenticate(AuthenticationRequest request) {
+        var user = userService.findByUsername(request.getUsername()).orElse(null);
+        authenticationManager.authenticate(
+                new UsernamePasswordAuthenticationToken(
+                        request.getUsername(),
+                        request.getPassword()
+                )
+        );
+        var jwtToken = jwtUtil.generateToken(user);
+        return AuthenticationResponse.builder()
+                .token(jwtToken)
+                .build();
+    }
+}
Index: backend/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.1.5</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.hackathon</groupId>\r\n\t<artifactId>DroneDelivery</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>DroneDelivery</name>\r\n\t<description>DroneDelivery</description>\r\n\t<properties>\r\n\t\t<java.version>17</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.postgresql</groupId>\r\n\t\t\t<artifactId>postgresql</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.security</groupId>\r\n\t\t\t<artifactId>spring-security-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<excludes>\r\n\t\t\t\t\t\t<exclude>\r\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t\t\t\t</exclude>\r\n\t\t\t\t\t</excludes>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/pom.xml b/backend/pom.xml
--- a/backend/pom.xml	(revision 5310f6bfea031db6ef4484738fb25e747eacc270)
+++ b/backend/pom.xml	(date 1698391705389)
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>org.springframework.boot</groupId>
 		<artifactId>spring-boot-starter-parent</artifactId>
-		<version>3.1.5</version>
+		<version>3.0.5</version>
 		<relativePath/> <!-- lookup parent from repository -->
 	</parent>
 	<groupId>com.hackathon</groupId>
@@ -33,7 +33,21 @@
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-web</artifactId>
 		</dependency>
-
+		<dependency>
+			<groupId>io.jsonwebtoken</groupId>
+			<artifactId>jjwt-impl</artifactId>
+			<version>0.11.5</version>
+		</dependency>
+		<dependency>
+			<groupId>io.jsonwebtoken</groupId>
+			<artifactId>jjwt-jackson</artifactId>
+			<version>0.11.5</version>
+		</dependency>
+		<dependency>
+			<groupId>io.jsonwebtoken</groupId>
+			<artifactId>jjwt-api</artifactId>
+			<version>0.11.5</version>
+		</dependency>
 		<dependency>
 			<groupId>org.postgresql</groupId>
 			<artifactId>postgresql</artifactId>
Index: backend/src/main/java/com/hackathon/dronedelivery/util/JwtUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/util/JwtUtil.java b/backend/src/main/java/com/hackathon/dronedelivery/util/JwtUtil.java
new file mode 100644
--- /dev/null	(date 1698391146844)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/util/JwtUtil.java	(date 1698391146844)
@@ -0,0 +1,89 @@
+package com.hackathon.dronedelivery.util;
+
+import io.jsonwebtoken.Claims;
+import io.jsonwebtoken.ExpiredJwtException;
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.SignatureAlgorithm;
+import io.jsonwebtoken.impl.DefaultClaims;
+import io.jsonwebtoken.io.Decoders;
+import io.jsonwebtoken.security.Keys;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.stereotype.Component;
+
+import java.io.Serializable;
+import java.security.Key;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+@Component
+public class JwtUtil implements Serializable {
+    public static final long JWT_TOKEN_VALIDITY = 30 * 24 * 60 * 60;
+    @Value("${jwt.secret}")
+    private String secret;
+
+    public String extractUsername(String token) {
+        return extractClaim(token, Claims::getSubject);
+    }
+    private Claims extractAllClaims(String token) {
+        try {
+            return Jwts
+                    .parserBuilder()
+                    .setSigningKey(getSignInKey())
+                    .build()
+                    .parseClaimsJws(token)
+                    .getBody();
+        } catch (ExpiredJwtException e) {
+            return new DefaultClaims();
+        }
+    }
+
+    private Key getSignInKey() {
+        byte[] bytes = Decoders.BASE64.decode(secret);
+        return Keys.hmacShaKeyFor(bytes);
+    }
+    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
+        final Claims claims = extractAllClaims(token);
+        return claimsResolver.apply(claims);
+    }
+    public String generateToken(UserDetails userDetails) {
+        Map<String, Object> claims = new HashMap<>();
+        claims.put("authorities", userDetails.getAuthorities()
+                .stream()
+                .map(GrantedAuthority::getAuthority)
+                .collect(Collectors.toList()));
+        return generateToken(claims, userDetails);
+    }
+
+    public String generateToken(Map<String, Object> extraClaims,
+                                UserDetails userDetails) {
+        return buildToken(extraClaims, userDetails);
+    }
+    private String buildToken(Map<String, Object> extraClaims,
+                              UserDetails userDetails) {
+        return Jwts
+                .builder()
+                .setClaims(extraClaims)
+                .setSubject(userDetails.getUsername())
+                .setIssuedAt(new Date(System.currentTimeMillis()))
+                .setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 100))
+                .signWith(getSignInKey(), SignatureAlgorithm.HS256)
+                .compact();
+    }
+    public boolean isTokenValid(String token, UserDetails userDetails) {
+        final String username = extractUsername(token);
+        return (userDetails != null && username.equals(userDetails.getUsername())) && !isTokenExpired(token);
+    }
+
+    private boolean isTokenExpired(String token) {
+        return extractExpiration(token).before(new Date());
+    }
+
+    private Date extractExpiration(String token) {
+        return extractClaim(token, Claims::getExpiration);
+    }
+}
\ No newline at end of file
Index: backend/src/main/java/com/hackathon/dronedelivery/util/filter/JwtFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/util/filter/JwtFilter.java b/backend/src/main/java/com/hackathon/dronedelivery/util/filter/JwtFilter.java
new file mode 100644
--- /dev/null	(date 1698391337050)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/util/filter/JwtFilter.java	(date 1698391337050)
@@ -0,0 +1,57 @@
+package com.hackathon.dronedelivery.util.filter;
+
+import com.hackathon.dronedelivery.util.JwtUtil;
+import jakarta.servlet.FilterChain;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpHeaders;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
+import org.springframework.stereotype.Component;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+
+import java.io.IOException;
+
+
+
+@Component
+@RequiredArgsConstructor
+public class JwtFilter extends OncePerRequestFilter {
+    private final JwtUtil jwtUtil;
+    private final UserDetailsService userDetailsService;
+    @Override
+    protected void doFilterInternal(HttpServletRequest request,
+                                    HttpServletResponse response,
+                                    FilterChain filterChain) throws ServletException, IOException {
+        final String authHeader = request.getHeader(HttpHeaders.AUTHORIZATION);
+        final String jwt;
+        final String username;
+        if (authHeader == null ||!authHeader.startsWith("Bearer ")) {
+            filterChain.doFilter(request, response);
+            return;
+        }
+        jwt = authHeader.substring(7);
+        username = jwtUtil.extractUsername(jwt);
+        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
+            UserDetails userDetails = userDetailsService.loadUserByUsername(username);
+            if (jwtUtil.isTokenValid(jwt, userDetails)) {
+                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
+                        userDetails,
+                        null,
+                        userDetails.getAuthorities()
+                );
+                authToken.setDetails(
+                        new WebAuthenticationDetailsSource().buildDetails(request)
+                );
+                SecurityContextHolder.getContext().setAuthentication(authToken);
+            }
+        }
+        filterChain.doFilter(request, response);
+    }
+}
Index: backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationRequest.java b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationRequest.java
new file mode 100644
--- /dev/null	(date 1698392409957)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationRequest.java	(date 1698392409957)
@@ -0,0 +1,15 @@
+package com.hackathon.dronedelivery.auth;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class AuthenticationRequest {
+    private String username;
+    private String password;
+}
Index: backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.controller;\r\n\r\nimport com.hackathon.dronedelivery.model.Drone;\r\n\r\nimport com.hackathon.dronedelivery.service.DroneService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"api\")\r\npublic class DroneController {\r\n\r\n    private final DroneService droneService;\r\n\r\n    @PostMapping(\"/drones\")\r\n    public ResponseEntity<List<Drone>> getDrones() {\r\n        return ResponseEntity.ok(droneService.findAll());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java b/backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java	(revision 5310f6bfea031db6ef4484738fb25e747eacc270)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java	(date 1698392821404)
@@ -13,7 +13,7 @@
 
 @RestController
 @RequiredArgsConstructor
-@RequestMapping("api")
+@RequestMapping("/api")
 public class DroneController {
 
     private final DroneService droneService;
Index: backend/src/main/java/com/hackathon/dronedelivery/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.service;\r\n\r\nimport com.hackathon.dronedelivery.repository.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class UserService {\r\n\r\n    private final UserRepository userRepository;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/service/UserService.java b/backend/src/main/java/com/hackathon/dronedelivery/service/UserService.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/service/UserService.java	(revision 5310f6bfea031db6ef4484738fb25e747eacc270)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/service/UserService.java	(date 1698392409974)
@@ -1,13 +1,23 @@
 package com.hackathon.dronedelivery.service;
 
+import com.hackathon.dronedelivery.model.User;
 import com.hackathon.dronedelivery.repository.UserRepository;
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
 
+import java.util.Optional;
+
 @Service
 @RequiredArgsConstructor
 public class UserService {
 
     private final UserRepository userRepository;
 
+    public Optional<User> findByUsername(String username) {
+        return userRepository.findByUsername(username);
+    }
+
+    public User save(User user) {
+       return userRepository.save(user);
+    }
 }
Index: backend/src/main/java/com/hackathon/dronedelivery/model/Authority.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/model/Authority.java b/backend/src/main/java/com/hackathon/dronedelivery/model/Authority.java
new file mode 100644
--- /dev/null	(date 1698391628808)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/model/Authority.java	(date 1698391628808)
@@ -0,0 +1,34 @@
+package com.hackathon.dronedelivery.model;
+
+import com.hackathon.dronedelivery.enums.Role;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.security.core.GrantedAuthority;
+
+@Data
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+@Table(name = "authority")
+public class Authority implements GrantedAuthority {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    @Enumerated(EnumType.STRING)
+    private Role role;
+    @ManyToOne(optional = false)
+    private User user;
+
+    @Override
+    public String getAuthority() {
+        return role.name();
+    }
+
+    public Authority(Role role) {
+        this.role = role;
+    }
+}
Index: backend/src/main/java/com/hackathon/dronedelivery/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.repository;\r\n\r\nimport com.hackathon.dronedelivery.model.User;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface UserRepository extends JpaRepository<User, Long> {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/repository/UserRepository.java b/backend/src/main/java/com/hackathon/dronedelivery/repository/UserRepository.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/repository/UserRepository.java	(revision 5310f6bfea031db6ef4484738fb25e747eacc270)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/repository/UserRepository.java	(date 1698391337055)
@@ -3,5 +3,8 @@
 import com.hackathon.dronedelivery.model.User;
 import org.springframework.data.jpa.repository.JpaRepository;
 
+import java.util.Optional;
+
 public interface UserRepository extends JpaRepository<User, Long> {
+    Optional<User> findByUsername(String username);
 }
