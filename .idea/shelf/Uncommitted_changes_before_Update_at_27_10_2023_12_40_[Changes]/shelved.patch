Index: backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.auth;\r\n\r\nimport com.hackathon.dronedelivery.model.Authority;\r\nimport com.hackathon.dronedelivery.model.User;\r\nimport com.hackathon.dronedelivery.service.UserService;\r\nimport com.hackathon.dronedelivery.util.JwtUtil;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AuthenticationService {\r\n\r\n    private final UserService userService;\r\n    private final PasswordEncoder passwordEncoder;\r\n    private final JwtUtil jwtUtil;\r\n    private final AuthenticationManager authenticationManager;\r\n\r\n    public AuthenticationResponse register(RegisterRequest request) {\r\n        Authority authority = new Authority(request.getRole());\r\n        var user = User.builder()\r\n                .username(request.getUsername())\r\n                .name(request.getName())\r\n                .surname(request.getSurname())\r\n                .password(passwordEncoder.encode(request.getPassword()))\r\n                .authorities(List.of(authority))\r\n                .build();\r\n\r\n        authority.setUser(user);\r\n        userService.save(user);\r\n\r\n        var jwtToken = jwtUtil.generateToken(user);\r\n        return AuthenticationResponse.builder()\r\n                .token(jwtToken)\r\n                .user(user)\r\n                .build();\r\n    }\r\n\r\n    public AuthenticationResponse authenticate(AuthenticationRequest request) {\r\n        var user = userService.findByUsername(request.getUsername()).orElse(null);\r\n        authenticationManager.authenticate(\r\n                new UsernamePasswordAuthenticationToken(\r\n                        request.getUsername(),\r\n                        request.getPassword()\r\n                )\r\n        );\r\n        var jwtToken = jwtUtil.generateToken(user);\r\n        return AuthenticationResponse.builder()\r\n                .token(jwtToken)\r\n                .user(user)\r\n                .build();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationService.java b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationService.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationService.java	(revision 63fc6f9a649e3d9c57bf4c89bf5e1b16e6f2fd86)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationService.java	(date 1698398737183)
@@ -1,5 +1,6 @@
 package com.hackathon.dronedelivery.auth;
 
+import com.hackathon.dronedelivery.exception.UserNotFoundException;
 import com.hackathon.dronedelivery.model.Authority;
 import com.hackathon.dronedelivery.model.User;
 import com.hackathon.dronedelivery.service.UserService;
@@ -42,14 +43,19 @@
                 .build();
     }
 
-    public AuthenticationResponse authenticate(AuthenticationRequest request) {
+    public AuthenticationResponse authenticate(AuthenticationRequest request) throws UserNotFoundException {
         var user = userService.findByUsername(request.getUsername()).orElse(null);
-        authenticationManager.authenticate(
-                new UsernamePasswordAuthenticationToken(
-                        request.getUsername(),
-                        request.getPassword()
-                )
-        );
+        try {
+            authenticationManager.authenticate(
+                    new UsernamePasswordAuthenticationToken(
+                            request.getUsername(),
+                            request.getPassword()
+                    )
+            );
+        } catch (Exception e) {
+            throw new UserNotFoundException(e.getMessage());
+        }
+
         var jwtToken = jwtUtil.generateToken(user);
         return AuthenticationResponse.builder()
                 .token(jwtToken)
Index: backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.auth;\r\n\r\n\r\nimport com.hackathon.dronedelivery.model.User;\r\nimport com.hackathon.dronedelivery.util.JwtUtil;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpHeaders;\r\n\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\r\n\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"/api\")\r\npublic class AuthenticationController {\r\n    private final AuthenticationService authenticationService;\r\n    private final JwtUtil jwtUtil;\r\n\r\n    @PostMapping(\"/register\")\r\n    public ResponseEntity<?> register(@RequestBody RegisterRequest request) {\r\n        AuthenticationResponse response = authenticationService.register(request);\r\n        return ResponseEntity.ok().header(HttpHeaders.AUTHORIZATION, String.valueOf(response.getToken())).body(response.getUser());\r\n    }\r\n\r\n    @PostMapping(\"/authenticate\")\r\n    public ResponseEntity<?> authenticate(\r\n            @RequestBody AuthenticationRequest request) {\r\n        AuthenticationResponse response = authenticationService.authenticate(request);\r\n        return ResponseEntity.ok().header(HttpHeaders.AUTHORIZATION, String.valueOf(response.getToken())).body(response.getUser());\r\n    }\r\n\r\n    @GetMapping(\"/validate\")\r\n    public ResponseEntity<?> validationToken (@RequestParam(\"token\") String token, @AuthenticationPrincipal User user) {\r\n        boolean isValidateToken = jwtUtil.isTokenValid(token, user);\r\n        return ResponseEntity.ok(isValidateToken);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationController.java b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationController.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationController.java	(revision 63fc6f9a649e3d9c57bf4c89bf5e1b16e6f2fd86)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/auth/AuthenticationController.java	(date 1698398746225)
@@ -1,6 +1,7 @@
 package com.hackathon.dronedelivery.auth;
 
 
+import com.hackathon.dronedelivery.exception.UserNotFoundException;
 import com.hackathon.dronedelivery.model.User;
 import com.hackathon.dronedelivery.util.JwtUtil;
 import lombok.RequiredArgsConstructor;
@@ -27,7 +28,7 @@
 
     @PostMapping("/authenticate")
     public ResponseEntity<?> authenticate(
-            @RequestBody AuthenticationRequest request) {
+            @RequestBody AuthenticationRequest request) throws UserNotFoundException {
         AuthenticationResponse response = authenticationService.authenticate(request);
         return ResponseEntity.ok().header(HttpHeaders.AUTHORIZATION, String.valueOf(response.getToken())).body(response.getUser());
     }
Index: backend/src/main/java/com/hackathon/dronedelivery/exception/UserNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/exception/UserNotFoundException.java b/backend/src/main/java/com/hackathon/dronedelivery/exception/UserNotFoundException.java
new file mode 100644
--- /dev/null	(date 1698398737194)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/exception/UserNotFoundException.java	(date 1698398737194)
@@ -0,0 +1,7 @@
+package com.hackathon.dronedelivery.exception;
+
+public class UserNotFoundException extends Exception {
+    public UserNotFoundException(String message) {
+        super(message);
+    }
+}
Index: backend/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.url= jdbc:postgresql://localhost:5432/drone_delivery\r\nspring.datasource.username=postgres\r\nspring.datasource.password=postgres\r\n\r\nspring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect\r\n\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=update\r\n\r\nspring.security.filter.order=10\r\n\r\nserver.port=8756\r\n\r\njwt.secret=Op6WjlPzeSryUVRacnGO7Gt5Csl6pOyeHNiSI7ehNrxyW3Dly2kHsu1V1RtKeREvKYaqbN\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/backend/src/main/resources/application.properties b/backend/src/main/resources/application.properties
--- a/backend/src/main/resources/application.properties	(revision 63fc6f9a649e3d9c57bf4c89bf5e1b16e6f2fd86)
+++ b/backend/src/main/resources/application.properties	(date 1698397738215)
@@ -9,6 +9,6 @@
 
 spring.security.filter.order=10
 
-server.port=8756
+server.port=8765
 
 jwt.secret=Op6WjlPzeSryUVRacnGO7Gt5Csl6pOyeHNiSI7ehNrxyW3Dly2kHsu1V1RtKeREvKYaqbN
