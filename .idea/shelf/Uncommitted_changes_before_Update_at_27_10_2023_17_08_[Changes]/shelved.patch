Index: backend/src/main/java/com/hackathon/dronedelivery/model/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.model;\r\n\r\nimport com.hackathon.dronedelivery.enums.OrderStatus;\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.List;\r\n\r\n@Data\r\n@Entity\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Table(name = \"orders\")\r\npublic class Order {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String customerAddress;\r\n    private String customerName;\r\n    private String customerNumber;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private OrderStatus orderStatus;\r\n\r\n    private Double weight;\r\n\r\n    @OneToMany\r\n    private List<Product> products;\r\n\r\n    public double getWeight(){\r\n        double res = 0;\r\n        for (Product product:\r\n             products) {\r\n            res+=product.getWeight();\r\n        }\r\n        return res;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Order{\" +\r\n                \"customerAddress='\" + customerAddress + '\\'' +\r\n                \", customerName='\" + customerName + '\\'' +\r\n                \", customerNumber='\" + customerNumber + '\\'' +\r\n                \", orderStatus=\" + orderStatus +\r\n                \", weight=\" + weight +\r\n                \", products=\" + products +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/model/Order.java b/backend/src/main/java/com/hackathon/dronedelivery/model/Order.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/model/Order.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/model/Order.java	(date 1698415210177)
@@ -1,5 +1,6 @@
 package com.hackathon.dronedelivery.model;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.hackathon.dronedelivery.enums.OrderStatus;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
@@ -29,9 +30,13 @@
 
     private Double weight;
 
-    @OneToMany
+
+    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
     private List<Product> products;
 
+    @ManyToOne
+    private Drone drone;
+
     public double getWeight(){
         double res = 0;
         for (Product product:
Index: backend/src/main/java/com/hackathon/dronedelivery/model/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.model;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@Entity\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Table(name = \"product\")\r\npublic class Product {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @Column\r\n    private double weight;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/model/Product.java b/backend/src/main/java/com/hackathon/dronedelivery/model/Product.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/model/Product.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/model/Product.java	(date 1698413549032)
@@ -17,6 +17,11 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
-    @Column
     private double weight;
+
+    private String name;
+
+    @ManyToOne
+    @JoinColumn(name = "order_id")
+    private Order order;
 }
Index: backend/src/main/java/com/hackathon/dronedelivery/model/DroneSendRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.model;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\npublic class DroneSendRequest {\r\n    @Id\r\n    long droneSendRequest;\r\n\r\n    @ManyToOne\r\n    Drone drone;\r\n\r\n    @OneToMany\r\n    List<Order> orderList;\r\n\r\n    @Column\r\n    String status;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/model/DroneSendRequest.java b/backend/src/main/java/com/hackathon/dronedelivery/model/DroneSendRequest.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/model/DroneSendRequest.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/model/DroneSendRequest.java	(date 1698410879642)
@@ -9,14 +9,16 @@
 @Data
 public class DroneSendRequest {
     @Id
-    long droneSendRequest;
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private long droneSendRequest;
 
     @ManyToOne
-    Drone drone;
+    private Drone drone;
 
+    @Transient
     @OneToMany
-    List<Order> orderList;
+    private List<Order> orderList;
 
     @Column
-    String status;
+    private String status;
 }
Index: backend/src/main/java/com/hackathon/dronedelivery/model/Drone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.model;\r\n\r\nimport com.hackathon.dronedelivery.enums.DroneStatus;\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.List;\r\n\r\n@Data\r\n@Entity\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Table(name = \"drone\")\r\npublic class Drone {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @OneToMany\r\n    private List<Order> orders;\r\n\r\n    private double charge;\r\n\r\n    private double fullChargeDistance;\r\n\r\n    private double maxWeight;\r\n\r\n    private double currentLongitude;\r\n    private double currentLatitude;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private DroneStatus status;\r\n    public boolean isChargeEnoughToDeliver(double distance){\r\n        return fullChargeDistance*(charge/100) > distance && (fullChargeDistance-distance/fullChargeDistance)*100>=25;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/model/Drone.java b/backend/src/main/java/com/hackathon/dronedelivery/model/Drone.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/model/Drone.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/model/Drone.java	(date 1698415587323)
@@ -1,5 +1,6 @@
 package com.hackathon.dronedelivery.model;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.hackathon.dronedelivery.enums.DroneStatus;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
@@ -21,9 +22,13 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
+    @Transient
     @OneToMany
     private List<Order> orders;
 
+    @ManyToOne
+    private DroneSendRequest droneSendRequest;
+
     private double charge;
 
     private double fullChargeDistance;
Index: backend/src/main/java/com/hackathon/dronedelivery/service/OrderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.service;\r\n\r\nimport com.hackathon.dronedelivery.model.Order;\r\nimport com.hackathon.dronedelivery.repository.OrderRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class OrderService {\r\n    public final OrderRepository orderRepository;\r\n\r\n    public List<Order> findAll() {\r\n        return orderRepository.findAll();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/service/OrderService.java b/backend/src/main/java/com/hackathon/dronedelivery/service/OrderService.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/service/OrderService.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/service/OrderService.java	(date 1698415210170)
@@ -1,9 +1,11 @@
 package com.hackathon.dronedelivery.service;
 
 import com.hackathon.dronedelivery.model.Order;
+import com.hackathon.dronedelivery.model.Product;
 import com.hackathon.dronedelivery.repository.OrderRepository;
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.util.List;
 
@@ -15,4 +17,9 @@
     public List<Order> findAll() {
         return orderRepository.findAll();
     }
+
+    @Transactional
+    public void add(Order order) {
+        orderRepository.save(order);
+    }
 }
Index: backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.service;\r\n\r\nimport com.hackathon.dronedelivery.model.*;\r\nimport com.hackathon.dronedelivery.repository.DroneRepository;\r\nimport com.hackathon.dronedelivery.repository.RequestRepository;\r\nimport com.hackathon.dronedelivery.util.WeightTree;\r\nimport lombok.AllArgsConstructor;\r\nimport org.aspectj.weaver.ast.Or;\r\nimport org.json.JSONObject;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.net.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.*;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class DroneDistributionService {\r\n    private final DronePool dronePool;\r\n    private final OrderPool orderPool;\r\n    private final RequestRepository requestRepository;\r\n\r\n    private final DroneRepository droneRepository;\r\n//    public DroneDistributionService(@Autowired DronePool dronePool,\r\n//                                    @Autowired OrderPool orderPool){\r\n//        this.dronePool = dronePool;\r\n//        this.orderPool = orderPool;\r\n//    }\r\n\r\n    public void AddOrder(Order order) throws IOException, URISyntaxException {\r\n        orderPool.add(order);\r\n        produceMatch();\r\n    }\r\n\r\n    public void addDrone(Drone drone) throws IOException, URISyntaxException {\r\n        dronePool.add(drone);\r\n        produceMatch();\r\n    }\r\n\r\n    private void match(Drone drone, List<Order> orders){\r\n        drone.setOrders(orders);\r\n        droneRepository.save(drone);\r\n\r\n        var request = new DroneSendRequest();\r\n        request.setDrone(drone);\r\n        request.setStatus(\"Создана\");\r\n        request.setOrderList(orders);\r\n\r\n        requestRepository.save(request);\r\n    }\r\n\r\n    private boolean produceMatch() throws IOException, URISyntaxException {\r\n        if(!dronePool.isEmpty() && !orderPool.isEmpty()){\r\n            var drone = dronePool.poll();\r\n            var tree = new WeightTree(drone.getMaxWeight());\r\n            for (Order order:\r\n                 orderPool.getOrderPool()) {\r\n                tree.Add(order);\r\n            }\r\n\r\n            var ordersToDeliver = tree.getLeft();\r\n            ordersToDeliver = removeOrdersBasedOnDistance(drone,\r\n                    ordersToDeliver, new GeoCoords(drone.getCurrentLongitude(),\r\n                            drone.getCurrentLatitude()));\r\n\r\n            if(ordersToDeliver.isEmpty()){\r\n                //droneService.setBadDrone(drone);\r\n                produceMatch();\r\n            }\r\n            else {\r\n                match(drone, ordersToDeliver);\r\n                 //MATH DONE\r\n            }\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n\r\n    private List<Order> removeOrdersBasedOnDistance(Drone drone, List<Order> orders, GeoCoords startPoint) throws IOException, URISyntaxException {\r\n        List<GeoCoords> coords = new ArrayList<>();\r\n        List<Order> result = new ArrayList<>(orders);\r\n        Map<GeoCoords, Order> ordersMap = new HashMap<>();\r\n        for (Order order:\r\n             orders) {\r\n            var c = getCoords(order.getCustomerAddress());\r\n            coords.add(c);\r\n            ordersMap.put(c, order);\r\n        }\r\n\r\n        coords = getShortestWay(startPoint, coords);\r\n\r\n        while(!(drone.isChargeEnoughToDeliver(getCoordsSum(coords))) || !coords.isEmpty()){\r\n            coords.remove(coords.size()-1);\r\n            result.remove(ordersMap.get(coords));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private double getCoordsSum(List<GeoCoords> coords){\r\n        double result = 0;\r\n        for(int i = 1; i<coords.size(); i++){\r\n            result+=getDistance(coords.get(i-1), coords.get(i));\r\n        }\r\n        return result;\r\n    }\r\n    private List<GeoCoords> getShortestWay(GeoCoords startPoint, List<GeoCoords> coords){\r\n        List<GeoCoords> eList = new ArrayList<>(coords);\r\n        List<GeoCoords> result = new LinkedList<>();\r\n        result.add(startPoint);\r\n\r\n        var coordToAdd = eList.get(0);\r\n        double min = getDistance(startPoint, coordToAdd);\r\n        for (GeoCoords coord :\r\n                eList) {\r\n            var dist = getDistance(startPoint, coord);\r\n\r\n            if(min>dist) {\r\n                min = dist;\r\n                coordToAdd = coord;\r\n            }\r\n        }\r\n\r\n        eList.remove(coordToAdd);\r\n        result.add(coordToAdd);\r\n        var prevPoint = coordToAdd;\r\n\r\n        for(int i = 0; i < coords.size()-1; i++) {\r\n            coordToAdd = eList.get(0);\r\n            min = getDistance(prevPoint, coordToAdd);\r\n            for (GeoCoords coord :\r\n                    eList) {\r\n                var dist = getDistance(prevPoint, coord);\r\n\r\n                if(min>dist){\r\n                    min = dist;\r\n                    coordToAdd = coord;\r\n                }\r\n            }\r\n            eList.remove(coordToAdd);\r\n            result.add(coordToAdd);\r\n            prevPoint = coordToAdd;\r\n        }\r\n\r\n        result.add(eList.get(0));\r\n        return result;\r\n    }\r\n\r\n    private double getDistance(GeoCoords first, GeoCoords second){\r\n        return Math.sqrt(Math.pow(second.getLatitude() - first.getLatitude(),2) + Math.pow(second.getLongitude() - first.getLongitude(),2));\r\n    }\r\n\r\n    private GeoCoords getCoords(String adress) throws IOException, URISyntaxException {\r\n        //URL url = new URL(\"https://geocode-maps.yandex.ru/1.x?apikey=96839f5b-3a26-4ecc-9f2d-feb2ba6ab2d3&geocode=\\\"\"+adress+\"\\\"&format=json\");\r\n        String encodedAddress = URLEncoder.encode(adress, \"UTF-8\");\r\n\r\n        URL url = new URL(\"https://geocode-maps.yandex.ru/1.x?apikey=96839f5b-3a26-4ecc-9f2d-feb2ba6ab2d3&geocode=\" + encodedAddress + \"&format=json\");\r\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n        connection.setRequestMethod(\"GET\");\r\n\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\r\n        String line;\r\n        StringBuilder response = new StringBuilder();\r\n\r\n        while ((line = reader.readLine()) != null) {\r\n            response.append(line);\r\n        }\r\n        reader.close();\r\n\r\n        String jsonStr = response.toString();\r\n        JSONObject jsonObject = new JSONObject(jsonStr);\r\n\r\n        return new GeoCoords(jsonObject.getJSONObject(\"Point\").get(\"pos\").toString());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java b/backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java	(date 1698413982270)
@@ -2,6 +2,7 @@
 
 import com.hackathon.dronedelivery.model.*;
 import com.hackathon.dronedelivery.repository.DroneRepository;
+import com.hackathon.dronedelivery.repository.OrderRepository;
 import com.hackathon.dronedelivery.repository.RequestRepository;
 import com.hackathon.dronedelivery.util.WeightTree;
 import lombok.AllArgsConstructor;
Index: backend/src/main/java/com/hackathon/dronedelivery/service/DroneService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.service;\r\n\r\nimport com.hackathon.dronedelivery.model.Drone;\r\nimport com.hackathon.dronedelivery.repository.DroneRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class DroneService {\r\n    private final DroneRepository droneRepository;\r\n\r\n    public List<Drone> findAll() {\r\n        return droneRepository.findAll();\r\n    }\r\n    public void add(Drone drone){\r\n        droneRepository.save(drone);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/service/DroneService.java b/backend/src/main/java/com/hackathon/dronedelivery/service/DroneService.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/service/DroneService.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/service/DroneService.java	(date 1698415678293)
@@ -4,6 +4,7 @@
 import com.hackathon.dronedelivery.repository.DroneRepository;
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.util.List;
 
@@ -15,6 +16,7 @@
     public List<Drone> findAll() {
         return droneRepository.findAll();
     }
+    @Transactional
     public void add(Drone drone){
         droneRepository.save(drone);
     }
Index: backend/src/main/java/com/hackathon/dronedelivery/service/UserService.java
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/service/UserService.java b/backend/src/main/java/com/hackathon/dronedelivery/service/UserService.java
deleted file mode 100644
--- a/backend/src/main/java/com/hackathon/dronedelivery/service/UserService.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ /dev/null	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
@@ -1,23 +0,0 @@
-package com.hackathon.dronedelivery.service;
-
-import com.hackathon.dronedelivery.model.User;
-import com.hackathon.dronedelivery.repository.UserRepository;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-
-import java.util.Optional;
-
-@Service
-@RequiredArgsConstructor
-public class UserService {
-
-    private final UserRepository userRepository;
-
-    public Optional<User> findByUsername(String login) {
-        return userRepository.findByUsername(login);
-    }
-
-    public User save(User user) {
-       return userRepository.save(user);
-    }
-}
Index: backend/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.url= jdbc:postgresql://localhost:5432/drone_delivery\r\nspring.datasource.username=postgres\r\nspring.datasource.password=admin\r\n\r\nspring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect\r\n\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=update\r\n\r\nspring.security.filter.order=10\r\n\r\nserver.port=8765\r\n\r\njwt.secret=Op6WjlPzeSryUVRacnGO7Gt5Csl6pOyeHNiSI7ehNrxyW3Dly2kHsu1V1RtKeREvKYaqbN\r\n\r\nbackend.rememberMeKey = \"key\"\r\nfrontend.url = \"http://127.0.0.1:5173/\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/backend/src/main/resources/application.properties b/backend/src/main/resources/application.properties
--- a/backend/src/main/resources/application.properties	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/resources/application.properties	(date 1698414243248)
@@ -1,6 +1,6 @@
 spring.datasource.url= jdbc:postgresql://localhost:5432/drone_delivery
 spring.datasource.username=postgres
-spring.datasource.password=admin
+spring.datasource.password=postgres
 
 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
 
Index: backend/src/main/java/com/hackathon/dronedelivery/service/UsersService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.service;\r\n\r\nimport com.hackathon.dronedelivery.model.User;\r\nimport com.hackathon.dronedelivery.repository.UserRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\n@Service\r\n@Transactional\r\npublic class UsersService {\r\n    private UserRepository userRepository;\r\n    public UsersService(@Autowired UserRepository userRepository){\r\n        this.userRepository = userRepository;\r\n    }\r\n\r\n    public User getUser(Long id){\r\n        return userRepository.findById(id).get();\r\n    }\r\n\r\n    public User getUser(String pr){\r\n        return userRepository.findByUsername(pr.replaceAll(\" \", \"\")).get();\r\n    }\r\n\r\n    public void setSettings(String pr, String name, String surname, String imgLink){\r\n        User user = getUser(pr);\r\n        user.setName(name);\r\n        user.setSurname(surname);\r\n        Update(user);\r\n    }\r\n\r\n    public void Update(User user){\r\n        userRepository.save(user);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/service/UsersService.java b/backend/src/main/java/com/hackathon/dronedelivery/service/UsersService.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/service/UsersService.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/service/UsersService.java	(date 1698415587310)
@@ -2,17 +2,16 @@
 
 import com.hackathon.dronedelivery.model.User;
 import com.hackathon.dronedelivery.repository.UserRepository;
+import lombok.RequiredArgsConstructor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
 @Service
 @Transactional
+@RequiredArgsConstructor
 public class UsersService {
-    private UserRepository userRepository;
-    public UsersService(@Autowired UserRepository userRepository){
-        this.userRepository = userRepository;
-    }
+    private final UserRepository userRepository;
 
     public User getUser(Long id){
         return userRepository.findById(id).get();
Index: backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.controller;\r\n\r\nimport com.hackathon.dronedelivery.model.Drone;\r\n\r\nimport com.hackathon.dronedelivery.service.DroneDistributionService;\r\nimport com.hackathon.dronedelivery.service.DroneService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URISyntaxException;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"/api\")\r\npublic class DroneController {\r\n\r\n    private final DroneService droneService;\r\n    private final DroneDistributionService droneDistributionService;\r\n\r\n    @PostMapping(\"/drones\")\r\n    public ResponseEntity<List<Drone>> getDrones() {\r\n\r\n        return ResponseEntity.ok(droneService.findAll());\r\n    }\r\n\r\n    @PostMapping(\"/addDrone\")\r\n    public ResponseEntity addDrone(@RequestBody Drone drone) throws IOException, URISyntaxException {\r\n        droneService.add(drone);\r\n        droneDistributionService.addDrone(drone);\r\n        return new ResponseEntity(HttpStatus.OK);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java b/backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/controller/DroneController.java	(date 1698412578121)
@@ -26,14 +26,13 @@
 
     @PostMapping("/drones")
     public ResponseEntity<List<Drone>> getDrones() {
-
         return ResponseEntity.ok(droneService.findAll());
     }
 
     @PostMapping("/addDrone")
-    public ResponseEntity addDrone(@RequestBody Drone drone) throws IOException, URISyntaxException {
+    public ResponseEntity<?> addDrone(@RequestBody Drone drone) throws IOException, URISyntaxException {
         droneService.add(drone);
         droneDistributionService.addDrone(drone);
-        return new ResponseEntity(HttpStatus.OK);
+        return new ResponseEntity<>(HttpStatus.OK);
     }
 }
Index: backend/src/main/java/com/hackathon/dronedelivery/controller/OrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.controller;\r\n\r\nimport com.hackathon.dronedelivery.model.Order;\r\nimport com.hackathon.dronedelivery.service.DroneDistributionService;\r\nimport com.hackathon.dronedelivery.service.OrderService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URISyntaxException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"api\")\r\npublic class OrderController {\r\n\r\n    private final OrderService orderService;\r\n    private final DroneDistributionService droneDistributionService;\r\n\r\n    @PostMapping(\"/acceptOrder\")\r\n    public ResponseEntity acceptOrder(@RequestBody Order order) throws IOException, URISyntaxException {\r\n        droneDistributionService.AddOrder(order);\r\n        return new ResponseEntity(HttpStatus.OK);\r\n    }\r\n\r\n    @GetMapping(\"/orders\")\r\n    public ResponseEntity<List<Order>> getOrders() {\r\n        List<Order> orders = new ArrayList<>();\r\n        for (long i = 0; i < 10; i++) {\r\n            orders.add(Order.builder()\r\n                            .id(i)\r\n                            .customerName(\"Вася\")\r\n                            .customerNumber(\"234-234\")\r\n                            .products(new ArrayList<>())\r\n                            .weight(0.0)\r\n                            .customerAddress(\"Воронеж\")\r\n                            .build());\r\n        }\r\n        return ResponseEntity.ok(orders);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/controller/OrderController.java b/backend/src/main/java/com/hackathon/dronedelivery/controller/OrderController.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/controller/OrderController.java	(revision d9f5d437335aa06b091fb2bb47cd65e1666e9520)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/controller/OrderController.java	(date 1698413982275)
@@ -10,7 +10,7 @@
 
 import java.io.IOException;
 import java.net.URISyntaxException;
-import java.util.ArrayList;
+
 import java.util.List;
 
 
@@ -24,23 +24,13 @@
 
     @PostMapping("/acceptOrder")
     public ResponseEntity acceptOrder(@RequestBody Order order) throws IOException, URISyntaxException {
+        orderService.add(order);
         droneDistributionService.AddOrder(order);
         return new ResponseEntity(HttpStatus.OK);
     }
 
     @GetMapping("/orders")
     public ResponseEntity<List<Order>> getOrders() {
-        List<Order> orders = new ArrayList<>();
-        for (long i = 0; i < 10; i++) {
-            orders.add(Order.builder()
-                            .id(i)
-                            .customerName("Вася")
-                            .customerNumber("234-234")
-                            .products(new ArrayList<>())
-                            .weight(0.0)
-                            .customerAddress("Воронеж")
-                            .build());
-        }
-        return ResponseEntity.ok(orders);
+        return ResponseEntity.ok(orderService.findAll());
     }
 }
