Index: backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hackathon.dronedelivery.service;\r\n\r\nimport com.hackathon.dronedelivery.model.*;\r\nimport com.hackathon.dronedelivery.util.WeightTree;\r\nimport lombok.AllArgsConstructor;\r\nimport org.json.JSONObject;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.net.*;\r\nimport java.util.*;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class DroneDistributionService {\r\n    private final DronePool dronePool;\r\n    private final OrderPool orderPool;\r\n    private final RequestService requestService;\r\n    private final OrderService orderService;\r\n\r\n    private final DroneService droneService;\r\n//    public DroneDistributionService(@Autowired DronePool dronePool,\r\n//                                    @Autowired OrderPool orderPool){\r\n//        this.dronePool = dronePool;\r\n//        this.orderPool = orderPool;\r\n//    }\r\n\r\n    public void AddOrder(Order order) throws IOException, URISyntaxException {\r\n        orderPool.add(order);\r\n        produceMatch();\r\n    }\r\n\r\n    public void addDrone(Drone drone) throws IOException, URISyntaxException {\r\n        dronePool.add(drone);\r\n        produceMatch();\r\n    }\r\n\r\n    private void match(Drone drone, List<Order> orders) {\r\n        Drone persistDrone = droneService.findById(drone.getId()).get();\r\n        List<Order> persistOrders = new ArrayList<>();\r\n        for (Order value : orders) {\r\n            Order order = orderService.findById(value.getId()).get();\r\n            order.setDrone(persistDrone);\r\n            persistOrders.add(order);\r\n        }\r\n        persistDrone.setOrders(persistOrders);\r\n        var request = new DroneSendRequest();\r\n        request.setDrone(persistDrone);\r\n        request.setStatus(\"Создана\");\r\n        request.setOrderList(persistOrders);\r\n        requestService.save(request);\r\n    }\r\n\r\n    private boolean produceMatch() throws IOException, URISyntaxException {\r\n        if(!dronePool.isEmpty() && !orderPool.isEmpty()){\r\n            var drone = dronePool.poll();\r\n            var tree = new WeightTree(drone.getMaxWeight());\r\n            for (Order order:\r\n                 orderPool.getOrderPool()) {\r\n                tree.Add(order);\r\n            }\r\n\r\n            var ordersToDeliver = tree.getLeft();\r\n            ordersToDeliver = removeOrdersBasedOnDistance(drone,\r\n                    ordersToDeliver, new GeoCoords(drone.getCurrentLongitude(),\r\n                            drone.getCurrentLatitude()));\r\n\r\n            if(ordersToDeliver.isEmpty()){\r\n                //droneService.setBadDrone(drone);\r\n                produceMatch();\r\n            }\r\n            else {\r\n                match(drone, ordersToDeliver);\r\n                 //MATCH DONE\r\n            }\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n\r\n    private List<Order> removeOrdersBasedOnDistance(Drone drone, List<Order> orders, GeoCoords startPoint) throws IOException, URISyntaxException {\r\n        List<GeoCoords> coords = new ArrayList<>();\r\n        List<Order> result = new ArrayList<>(orders);\r\n        Map<GeoCoords, Order> ordersMap = new HashMap<>();\r\n        for (Order order: orders) {\r\n            var c = getCoords(order.getCustomerAddress());\r\n            coords.add(c);\r\n            ordersMap.put(c, order);\r\n        }\r\n\r\n        coords = getShortestWay(startPoint, coords);\r\n\r\n        while(coords.size()-1 >= 0 && !(drone.isChargeEnoughToDeliver(getCoordsSum(coords))) || !coords.isEmpty()){\r\n            coords.remove(coords.size()-1);\r\n            result.remove(ordersMap.get(coords));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private double getCoordsSum(List<GeoCoords> coords){\r\n        double result = 0;\r\n        for(int i = 1; i<coords.size(); i++){\r\n            result+=getDistance(coords.get(i-1), coords.get(i));\r\n        }\r\n        return result;\r\n    }\r\n    private List<GeoCoords> getShortestWay(GeoCoords startPoint, List<GeoCoords> coords){\r\n        List<GeoCoords> eList = new ArrayList<>(coords);\r\n        List<GeoCoords> result = new LinkedList<>();\r\n        result.add(startPoint);\r\n\r\n        var coordToAdd = eList.get(0);\r\n        double min = getDistance(startPoint, coordToAdd);\r\n        for (GeoCoords coord :\r\n                eList) {\r\n            var dist = getDistance(startPoint, coord);\r\n\r\n            if(min>dist) {\r\n                min = dist;\r\n                coordToAdd = coord;\r\n            }\r\n        }\r\n\r\n        eList.remove(coordToAdd);\r\n        result.add(coordToAdd);\r\n        var prevPoint = coordToAdd;\r\n\r\n        for(int i = 0; i < coords.size()-1; i++) {\r\n            coordToAdd = eList.get(0);\r\n            min = getDistance(prevPoint, coordToAdd);\r\n            for (GeoCoords coord :\r\n                    eList) {\r\n                var dist = getDistance(prevPoint, coord);\r\n\r\n                if(min>dist){\r\n                    min = dist;\r\n                    coordToAdd = coord;\r\n                }\r\n            }\r\n            eList.remove(coordToAdd);\r\n            result.add(coordToAdd);\r\n            prevPoint = coordToAdd;\r\n        }\r\n        if(eList.size()==1)\r\n            result.add(eList.get(0));\r\n        return result;\r\n    }\r\n\r\n    private double getDistance(GeoCoords first, GeoCoords second){\r\n        return Math.sqrt(Math.pow(second.getLatitude() - first.getLatitude(),2) + Math.pow(second.getLongitude() - first.getLongitude(),2));\r\n    }\r\n\r\n    private GeoCoords getCoords(String adress) throws IOException, URISyntaxException {\r\n        //URL url = new URL(\"https://geocode-maps.yandex.ru/1.x?apikey=96839f5b-3a26-4ecc-9f2d-feb2ba6ab2d3&geocode=\\\"\"+adress+\"\\\"&format=json\");\r\n        String encodedAddress = URLEncoder.encode(adress, \"UTF-8\");\r\n\r\n        URL url = new URL(\"https://geocode-maps.yandex.ru/1.x?apikey=96839f5b-3a26-4ecc-9f2d-feb2ba6ab2d3&geocode=\" + encodedAddress + \"&format=json\");\r\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n        connection.setRequestMethod(\"GET\");\r\n\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\r\n        String line;\r\n        StringBuilder response = new StringBuilder();\r\n\r\n        while ((line = reader.readLine()) != null) {\r\n            response.append(line);\r\n        }\r\n        reader.close();\r\n\r\n        String jsonStr = response.toString();\r\n        JSONObject jsonObject = new JSONObject(jsonStr);\r\n        var coords = jsonObject.getJSONObject(\"response\")\r\n                .getJSONObject(\"GeoObjectCollection\")\r\n                .getJSONArray(\"featureMember\")\r\n                .getJSONObject(0)\r\n                .getJSONObject(\"GeoObject\")\r\n                .getJSONObject(\"Point\")\r\n                .getString(\"pos\");\r\n\r\n        return new GeoCoords(coords);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java b/backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java
--- a/backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java	(revision 9fb25846b3cd85a6af3d9ca171b3b3660a0f0cfb)
+++ b/backend/src/main/java/com/hackathon/dronedelivery/service/DroneDistributionService.java	(date 1698442122470)
@@ -49,7 +49,6 @@
         var request = new DroneSendRequest();
         request.setDrone(persistDrone);
         request.setStatus("Создана");
-        request.setOrderList(persistOrders);
         requestService.save(request);
     }
 
